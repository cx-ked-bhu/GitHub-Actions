name: Security scan for cx-flow Plugin
on:
  push:
    branches:
      - main
  workflow_dispatch:
  # Scheduled scan every monday at 8 AM
  schedule:
    - cron: '0 8 * * 1'
jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          repository: 'checkmarx-ltd/cx-flow'
          path: 'cx-flow'
          ref: 'master'
      
      - name: Run Checkmarx scan
        id: scan-cxflow
        uses: checkmarx-ts/checkmarx-cxflow-github-action@v2.3
        continue-on-error: true
        with:
          project: cx-flow-new-scan
          team: ${{ secrets.CHECKMARX_TEAMS }}
          scanners: sca
          bug_tracker: Json
          # Set the environment variables for SCA scan
          sca_api_url: ${{ secrets.SCA_API_URL }}
          sca_app_url: ${{ secrets.SCA_APP_URL }}
          sca_access_control_url: ${{ secrets.SCA_ACCESS_CONTROL_URL }}
          sca_tenant: ${{  secrets.SCA_TENANT }}
          sca_username: ${{ secrets.SCA_USERNAME }}
          sca_password: ${{ secrets.SCA_PASSWORD }}
          #--f is the path to the source code from checkout code step
          params: "--logging.level.com.checkmarx.*=DEBUG --json.data-folder=./scans --json.file-name-format=[PROJECT].json --sca.enable-sca-resolver=true --f=."


      - name: upload artifact file
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ github.run_number }}
          path: ./scans/cx-flow-new-scan.json
          retention-days: 7

      - name: Check if vulnerabilities exist
        id: check-vulns
        run: |
          CXFLOW_JSON="./scans/cx-flow-new-scan.json" # adjust path

          # 1. Check if file exists and is not empty
          if [ ! -s "$CXFLOW_JSON" ]; then
            echo "âœ… JSON file missing or empty â€” skipping notification."
            echo "send_notification=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 2. Extract severity counts
          CRITICAL=$(jq '.scaResults.summary.findingCounts.CRITICAL // 0' "$CXFLOW_JSON")
          HIGH=$(jq '.scaResults.summary.findingCounts.HIGH // 0' "$CXFLOW_JSON")
          MEDIUM=$(jq '.scaResults.summary.findingCounts.MEDIUM // 0' "$CXFLOW_JSON")
          LOW=$(jq '.scaResults.summary.findingCounts.LOW // 0' "$CXFLOW_JSON")

          if [ "$CRITICAL" -eq 0 ] && [ "$HIGH" -eq 0 ] && [ "$MEDIUM" -eq 0 ] && [ "$LOW" -eq 0 ]; then
            echo "âœ… No vulnerabilities found â€” skipping notification."
            echo "send_notification=false" >> $GITHUB_OUTPUT
          else
            echo "ğŸš¨ Vulnerabilities detected."
            echo "send_notification=true" >> $GITHUB_OUTPUT
          fi

      - name: Parse CxFlow JSON and Send to Teams (Adaptive Card)
        if: steps.check-vulns.outputs.send_notification == 'true'
        run: |
          CXFLOW_JSON="./scans/cx-flow-new-scan.json"

          SCAN_ID=$(jq -r '.scaResults.scanId // "N/A"' "$CXFLOW_JSON")
          WEB_REPORT_LINK=$(jq -r '.scaResults.webReportLink // "N/A"' "$CXFLOW_JSON")

          FINDINGS_JSON=$(jq -c '[.scaResults.findings[]? | {
            severity: .severity,
            cve: .cveName,
            package: .packageId,
            fix: .fixResolutionText
          }]' "$CXFLOW_JSON" || echo "[]")

          if [ "$FINDINGS_JSON" = "[]" ]; then
            FINDINGS_JSON='[{"severity":"-","cve":"No vulnerabilities found","package":"-","fix":"-"}]'
          fi

          cat > teams-payload.json <<EOF
          {
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "\$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "type": "AdaptiveCard",
                  "version": "1.4",
                  "body": [
                    {
                      "type": "TextBlock",
                      "text": "ğŸš¨ Vulnerabilities Found in Checkmarx SCA Scan",
                      "wrap": true,
                      "weight": "Bolder",
                      "size": "Large",
                      "color": "Attention"
                    },
                    {
                      "type": "TextBlock",
                      "text": "Scan ID: ${SCAN_ID}",
                      "wrap": true
                    },
                    {
                      "type": "ActionSet",
                      "actions": [
                        {
                          "type": "Action.OpenUrl",
                          "title": "View Web Report",
                          "url": "${WEB_REPORT_LINK}"
                        }
                      ]
                    },
                    {
                      "type": "Table",
                      "columns": [
                        { "width": 1 },
                        { "width": 4 },
                        { "width": 4 },
                        { "width": 4 }
                      ],
                      "rows": [
                        {
                          "type": "TableRow",
                          "cells": [
                            { "type": "TableCell", "items": [ { "type": "TextBlock", "text": "Severity", "weight": "Bolder", "wrap": true } ] },
                            { "type": "TableCell", "items": [ { "type": "TextBlock", "text": "CVE", "weight": "Bolder", "wrap": true } ] },
                            { "type": "TableCell", "items": [ { "type": "TextBlock", "text": "Package", "weight": "Bolder", "wrap": true } ] },
                            { "type": "TableCell", "items": [ { "type": "TextBlock", "text": "Fix", "weight": "Bolder", "wrap": true } ] }
                          ]
                        }
                        $(echo "$FINDINGS_JSON" | jq -r '.[] |
                          ",{ \"type\": \"TableRow\", \"cells\": [
                            { \"type\": \"TableCell\", \"items\": [ { \"type\": \"TextBlock\", \"text\": \"" + (.severity|tostring) + "\", \"wrap\": true } ] },
                            { \"type\": \"TableCell\", \"items\": [ { \"type\": \"TextBlock\", \"text\": \"" + (.cve|tostring) + "\", \"wrap\": true, \"fontType\": \"Monospace\" } ] },
                            { \"type\": \"TableCell\", \"items\": [ { \"type\": \"TextBlock\", \"text\": \"" + (.package|tostring) + "\", \"wrap\": true, \"fontType\": \"Monospace\" } ] },
                            { \"type\": \"TableCell\", \"items\": [ { \"type\": \"TextBlock\", \"text\": \"" + (.fix|tostring) + "\", \"wrap\": true } ] }
                          ] }"
                        ')
                      ]
                    }
                  ]
                }
              }
            ]
          }
          EOF

          echo "Sending payload to Teams..."
          curl -v -H "Content-Type: application/json" \
          -d @teams-payload.json \
          "${{ secrets.TEAMS_WEBHOOK_URL }}"

          echo "Payload sent successfully."

      